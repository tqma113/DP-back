type User {
  id: ID!
  username: String!
  nickname: String!
  location: String
  gender: String!
  birthday: Date
  industry: [Industry]!
  register_at: Date!
  last_login_at: Date!
  avatar: String
  statement: String
  email: String!
  eduBG: [EduBG]!
  articles: [Article]!
  emRecords: [EmRecord]!
  categorys: [Category]!
  concerned_categorys: [Category]!
  concerned: [Concern]!
  likes: [Like]!
  collections: [Collect]!
  dynamics: [Dynamics]!
}

type EduBG {
  id: Int!
  school: String
  major: String
  degree: Degree
  user_id: Int!
}

type EmRecord {
  id: Int!
  company: String!
  position: String!
  user_id: Int!
}

type SecQuestion {
  question: String!
  answer: String!
  user: User!
}

type Industry {
  id: ID!
  name: String
  description: String
  image: String
}

type Category {
  id: ID!
  subject: String
  description: String
}

type Like {
  id: ID!
  create_time: Date
  user_id: Int
  article_id: Int
  comment_id: Int
  user: User
  article: Article
  comment: Comment
}

type Collect {
  id: ID!
  create_time: Date
  user_id: Int
  article_id: Int
  user: User
  article: Article
}

type Concern {
  id: ID!
  user_id: Int
  concern_user_id: Int
  user: User
  concern_user: User
  create_time: Date
}

type Article {
  id: ID!
  title: String!
  abstract: String!
  content: JSON
  release_time: Date
  last_modify_time: Date
  user: User
  project_link: [String]
  categorys: [Category]
  comments: [Comment]
  likes: [Like]
  collections: [Collect]
}

type Comment {
  id: ID!
  content: String
  user: User
  article: Article
  comments: [JSON]
  comment: Comment
  create_time: Date
  likes: [Like]
}

type Message {
  id: ID!
  send_user: User
  accept_user: User
  content: String
  send_at: Date
}

type SessionInfo {
  username: String!
  token: String
  isRefresh: Boolean!
}

type UploadInfo {
  filename: String!
  isSuccess: Boolean!
  size: Int!
  uri: String!
}

type Error {
  path: String
  message: String
}

type Extension {
  operator: String!
  errors: [Error]!
}

type Response {
  key: String
  token: String

  username: String
  url: String
  sessionInfo: SessionInfo

  user: User
  article: Article

  users: [User]
  categorys: [Category]
  industrys: [Industry]
  articles: [Article]

  isSuccess: Boolean!
  extension: Extension!
  code: Int
}

type Dynamics {
  type: DynamcisType!
  article: Article
  comment: Comment
  user: User
  do_at: Date!
}

enum Degree {
  BACHELOR
  MASTER
  DOCTOR
  OTHER
}

enum DynamcisType {
  ARTICLE_CREATE
  ARTICLE_MODIFY
  ARTICLE_LIKE
  ARTICLE_COLLECT

  COMMENT_CREATE
  COMMENT_LIKE

  USER_CONCERN
}

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

scalar Date
scalar JSON
scalar JSONObject